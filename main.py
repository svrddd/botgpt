import asyncio
import logging
import json
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.enums import ParseMode
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

API_TOKEN = '7621100705:AAHJ7R4N4ihthLUjV7cvcP95WrAo4GQOvl8'
ADMIN_CHAT_ID = '2105766790'
MENU_FILE = 'menu.json'

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

class OrderFSM(StatesGroup):
    choosing_item = State()
    choosing_time = State()
    choosing_payment = State()
    confirming_payment = State()

class FeedbackFSM(StatesGroup):
    writing_feedback = State()

def load_menu():
    try:
        with open(MENU_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_menu(menu):
    with open(MENU_FILE, 'w', encoding='utf-8') as f:
        json.dump(menu, f, indent=2, ensure_ascii=False)

menu_data = load_menu()

def main_menu_kb(user_id=None):
    buttons = [
        [KeyboardButton(text='‚òï –ú–µ–Ω—é'), KeyboardButton(text='üìç –ì–¥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è?')],
        [KeyboardButton(text='üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã'), KeyboardButton(text='‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')],
    ]
    if str(user_id) == ADMIN_CHAT_ID:
        buttons.append([KeyboardButton(text='üõ† –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é')])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def menu_buttons_kb():
    keyboard = []
    row = []
    for i, item in enumerate(menu_data):
        row.append(KeyboardButton(text=item))
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    keyboard.append([KeyboardButton(text='üîô –ù–∞–∑–∞–¥')])
    return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

def time_kb():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text='–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ')],
        [KeyboardButton(text='–£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è')],
        [KeyboardButton(text='üîô –ù–∞–∑–∞–¥')]
    ], resize_keyboard=True)

def payment_kb():
    return ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text='–°–ë–ü')],
        [KeyboardButton(text='–ö–∞—Ä—Ç–æ–π')],
        [KeyboardButton(text='üîô –ù–∞–∑–∞–¥')]
    ], resize_keyboard=True)

@dp.message(F.text.lower().in_(['start', '/start']))
async def cmd_start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Ñ–µ–π–Ω—é! ‚òï\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_kb(message.from_user.id))

@dp.message(F.text == '‚òï –ú–µ–Ω—é')
async def show_menu(message: Message):
    if not menu_data:
        await message.answer("–ú–µ–Ω—é –ø–æ–∫–∞ –ø—É—Å—Ç–æ–µ.", reply_markup=main_menu_kb(message.from_user.id))
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –º–µ–Ω—é —Å —Ü–µ–Ω–∞–º–∏
    text_menu = "üìã –ú–µ–Ω—é:\n\n"
    for item, data in menu_data.items():
        text_menu += f"{item} - <b>{data['price']}‚ÇΩ</b>\n"
    await message.answer(text_menu, reply_markup=menu_buttons_kb())
    await OrderFSM.choosing_item.set()

@dp.message(OrderFSM.choosing_item)
async def order_item(message: Message, state: FSMContext):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb(message.from_user.id))
        return

    item_name = message.text.strip()
    if item_name not in menu_data:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –∏–∑ –º–µ–Ω—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ 'üîô –ù–∞–∑–∞–¥'.")
        return

    price = menu_data[item_name]['price']
    await state.update_data(item=item_name)
    await OrderFSM.choosing_time.set()
    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{item_name}</b> –∑–∞ <b>{price}‚ÇΩ</b>\n\n"
        "–ö–æ–≥–¥–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑?",
        reply_markup=time_kb()
    )

@dp.message(OrderFSM.choosing_time)
async def choose_time(message: Message, state: FSMContext):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        await OrderFSM.choosing_item.set()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:", reply_markup=menu_buttons_kb())
        return

    if message.text == '–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ':
        await state.update_data(time='–∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ')
        await OrderFSM.choosing_payment.set()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_kb())
    elif message.text == '–£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è':
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30):")
        await OrderFSM.next()
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")

@dp.message(OrderFSM.choosing_payment)
async def set_custom_time(message: Message, state: FSMContext):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        await OrderFSM.choosing_time.set()
        await message.answer("–ö–æ–≥–¥–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑?", reply_markup=time_kb())
        return

    await state.update_data(time=message.text)
    await OrderFSM.confirming_payment.set()
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_kb())

@dp.message(OrderFSM.confirming_payment)
async def choose_payment(message: Message, state: FSMContext):
    if message.text == 'üîô –ù–∞–∑–∞–¥':
        await OrderFSM.choosing_payment.set()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_kb())
        return

    if message.text not in ['–°–ë–ü', '–ö–∞—Ä—Ç–æ–π']:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã.")
        return

    payment_method = 'sbp' if message.text == '–°–ë–ü' else 'card'
    await state.update_data(payment=payment_method)

    data = await state.get_data()
    item = data.get('item')
    time = data.get('time')
    pay_text = message.text

    confirm_kb = ReplyKeyboardMarkup(keyboard=[
        [KeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å')],
        [KeyboardButton(text='üîô –ù–∞–∑–∞–¥')]
    ], resize_keyboard=True)

    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{item}</b>\n"
        f"–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: <b>{time}</b>\n"
        f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: <b>{pay_text}</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ \"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å\" –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞.",
        reply_markup=confirm_kb
    )

@dp.message(OrderFSM.confirming_payment)
async def confirm_payment(message: Message, state: FSMContext):
    if message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        data = await state.get_data()
        item = data.get('item')
        time = data.get('time')
        payment = '–°–ë–ü' if data.get('payment') == 'sbp' else '–ö–∞—Ä—Ç–æ–π'

        await bot.send_message(chat_id=ADMIN_CHAT_ID,
                               text=f"üì• –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n–¢–æ–≤–∞—Ä: <b>{item}</b>\n–í—Ä–µ–º—è: {time}\n–û–ø–ª–∞—Ç–∞: {payment}")

        await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! ‚òï\n–û–Ω —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.", reply_markup=main_menu_kb(message.from_user.id))
        await state.clear()
    elif message.text == 'üîô –ù–∞–∑–∞–¥':
        await OrderFSM.choosing_payment.set()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_kb())
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' –∏–ª–∏ 'üîô –ù–∞–∑–∞–¥'.")

@dp.message(F.text == 'üìç –ì–¥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è?')
async def show_location(message: Message):
    yandex_link = "https://yandex.ru/maps/org/playa_coffee/63770758952/?ll=37.468172%2C56.141086&utm_source=share&z=18"
    await message.answer(
        "üìç –ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: Playa Coffee\n"
        f"<a href='{yandex_link}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö</a>",
        reply_markup=main_menu_kb(message.from_user.id),
        disable_web_page_preview=True
    )

@dp.message(F.text == 'üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã')
async def show_contacts(message: Message):
    await message.answer(
        "üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\nTelegram-–∫–∞–Ω–∞–ª: @playacoffee\nhttps://t.me/playacoffee",
        reply_markup=main_menu_kb(message.from_user.id)
    )

@dp.message(F.text == '‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å')
async def feedback_start(message: Message, state: FSMContext):
    await message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å:", reply_markup=main_menu_kb(message.from_user.id))
    await state.set_state(FeedbackFSM.writing_feedback)

@dp.message(FeedbackFSM.writing_feedback)
async def receive_feedback(message: Message, state: FSMContext):
    username = message.from_user.username or message.from_user.full_name
    await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç @{username}:\n{message.text}")
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã —É—á—Ç—ë–º –≤–∞—à –æ—Ç–∑—ã–≤.", reply_markup=main_menu_kb(message.from_user.id))
    await state.clear()

@dp.message(F.text == 'üõ† –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é')
async def edit_menu(message: Message):
    if str(message.from_user.id) != ADMIN_CHAT_ID:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", reply_markup=main_menu_kb(message.from_user.id))
        return
    await message.answer(
        "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é:\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–Ω–∞–∑–≤–∞–Ω–∏–µ>;<—Ü–µ–Ω–∞>",
        reply_markup=main_menu_kb(message.from_user.id)
    )

@dp.message(F.text.regexp(r'^.+;\d+$'))
async def add_menu_item(message: Message):
    if str(message.from_user.id) != ADMIN_CHAT_ID:
        return
    try:
        name, price = message.text.split(';')
        name = name.strip()
        price = int(price.strip())
        menu_data[name] = {'price': price}
        save_menu(menu_data)
        await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä: {name} –∑–∞ {price}‚ÇΩ", reply_markup=main_menu_kb(message.from_user.id))
    except Exception:
        await message.answer("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç —Ç–∞–∫–æ–π: –Ω–∞–∑–≤–∞–Ω–∏–µ;—Ü–µ–Ω–∞")

@dp.message(F.text == 'üîô –ù–∞–∑–∞–¥')
async def back_to_main(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb(message.from_user.id))

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
