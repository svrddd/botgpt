import asyncio
import logging
import json
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.enums import ParseMode
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

API_TOKEN = '7621100705:AAHJ7R4N4ihthLUjV7cvcP95WrAo4GQOvl8'
ADMIN_CHAT_ID = '2105766790'
MENU_FILE = 'menu.json'

logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞—ë–º –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º parse_mode –Ω–∞–ø—Ä—è–º—É—é
bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...


# STATES
class OrderFSM(StatesGroup):
    choosing_item = State()
    choosing_time = State()
    choosing_payment = State()
    confirming_payment = State()

class FeedbackFSM(StatesGroup):
    writing_feedback = State()

# LOAD MENU
def load_menu():
    try:
        with open(MENU_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

def save_menu(menu):
    with open(MENU_FILE, 'w', encoding='utf-8') as f:
        json.dump(menu, f, indent=2, ensure_ascii=False)

menu_data = load_menu()

# MARKUPS
def main_menu_kb(user_id=None):
    buttons = [
        [
            InlineKeyboardButton(text='‚òï –ú–µ–Ω—é', callback_data='menu'),
            InlineKeyboardButton(text='üìç –ì–¥–µ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è?', callback_data='location')
        ],
        [
            InlineKeyboardButton(text='üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data='contacts'),
            InlineKeyboardButton(text='‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', callback_data='feedback')
        ]
    ]
    if str(user_id) == ADMIN_CHAT_ID:
        buttons.append([
            InlineKeyboardButton(text='üõ† –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ–Ω—é', callback_data='edit_menu')
        ])
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def menu_kb():
    keyboard = []
    row = []
    for i, item in enumerate(menu_data):
        row.append(InlineKeyboardButton(text=f"{item} - {menu_data[item]['price']}‚ÇΩ", callback_data=f"order:{item}"))
        if len(row) == 2:
            keyboard.append(row)
            row = []
    if row:
        keyboard.append(row)
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def time_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ', callback_data='time:soon')],
        [InlineKeyboardButton(text='–£–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è', callback_data='time:custom')]
    ])

def payment_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–°–ë–ü', callback_data='pay:sbp')],
        [InlineKeyboardButton(text='–ö–∞—Ä—Ç–æ–π', callback_data='pay:card')]
    ])

# HANDLERS
@dp.message(F.text, F.text.lower().in_(['start', '/start']))
async def cmd_start(message: Message):
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ—Ñ–µ–π–Ω—é! ‚òï\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_kb(message.from_user.id))

@dp.callback_query(F.data == 'menu')
async def show_menu(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text("üìã –ú–µ–Ω—é:", reply_markup=menu_kb())

@dp.callback_query(F.data.startswith('order:'))
async def order_item(callback: CallbackQuery, state: FSMContext):
    item_name = callback.data.split(':')[1]
    item = menu_data.get(item_name)
    if item:
        await state.set_state(OrderFSM.choosing_time)
        await state.update_data(item=item_name)
        await callback.answer()
        await callback.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{item_name}</b> –∑–∞ <b>{item['price']}‚ÇΩ</b>\n\n"
            "–ö–æ–≥–¥–∞ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑?",
            reply_markup=time_kb()
        )

@dp.callback_query(F.data.startswith('time:'))
async def choose_time(callback: CallbackQuery, state: FSMContext):
    choice = callback.data.split(':')[1]
    await callback.answer()
    if choice == 'soon':
        await state.update_data(time='–∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ')
        await state.set_state(OrderFSM.choosing_payment)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_kb())
    elif choice == 'custom':
        await state.set_state(OrderFSM.choosing_payment)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å –∑–∞–∫–∞–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 15:30):")

@dp.message(OrderFSM.choosing_payment)
async def set_custom_time(message: Message, state: FSMContext):
    await state.update_data(time=message.text)
    await state.set_state(OrderFSM.confirming_payment)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=payment_kb())

@dp.callback_query(F.data.startswith('pay:'))
async def choose_payment(callback: CallbackQuery, state: FSMContext):
    payment_method = callback.data.split(':')[1]
    await state.update_data(payment=payment_method)
    data = await state.get_data()
    item = data.get('item')
    time = data.get('time')
    pay_text = '–°–ë–ü' if payment_method == 'sbp' else '–ö–∞—Ä—Ç–æ–π'
    await callback.answer()
    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{item}</b>\n"
        f"–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: <b>{time}</b>\n"
        f"–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: <b>{pay_text}</b>\n\n"
        "–ù–∞–∂–º–∏—Ç–µ \"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å\" –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data='confirm_payment')],
            [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='menu')]
        ])
    )

@dp.callback_query(F.data == 'confirm_payment')
async def confirm_payment(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    item = data.get('item')
    time = data.get('time')
    payment = '–°–ë–ü' if data.get('payment') == 'sbp' else '–ö–∞—Ä—Ç–æ–π'
    await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"üì• –ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n–¢–æ–≤–∞—Ä: <b>{item}</b>\n–í—Ä–µ–º—è: {time}\n–û–ø–ª–∞—Ç–∞: {payment}")
    await callback.answer()
    await callback.message.edit_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! ‚òï\n–û–Ω —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.", reply_markup=main_menu_kb(callback.from_user.id))
    await state.clear()

@dp.callback_query(F.data == 'location')
async def show_location(callback: CallbackQuery):
    yandex_link = "https://yandex.ru/maps/org/playa_coffee/63770758952/?ll=37.468172%2C56.141086&utm_source=share&z=18"
    await callback.answer()
    await callback.message.edit_text(
        "üìç –ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É: Playa Coffee\n"
        f"<a href='{yandex_link}'>–û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö</a>",
        reply_markup=main_menu_kb(callback.from_user.id),
        disable_web_page_preview=True
    )

@dp.callback_query(F.data == 'contacts')
async def show_contacts(callback: CallbackQuery):
    await callback.answer()
    await callback.message.edit_text(
        "üìû –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\nTelegram-–∫–∞–Ω–∞–ª: @playacoffee\nhttps://t.me/playacoffee",
        reply_markup=main_menu_kb(callback.from_user.id)
    )

@dp.callback_query(F.data == 'feedback')
async def feedback_start(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å:", reply_markup=main_menu_kb(callback.from_user.id))
    await state.set_state(FeedbackFSM.writing_feedback)

@dp.message(FeedbackFSM.writing_feedback)
async def receive_feedback(message: Message, state: FSMContext):
    await bot.send_message(chat_id=ADMIN_CHAT_ID, text=f"‚úâÔ∏è –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –æ—Ç @{message.from_user.username}:\n{message.text}")
    await message.answer("–°–ø–∞—Å–∏–±–æ! –ú—ã —É—á—Ç—ë–º –≤–∞—à –æ—Ç–∑—ã–≤.", reply_markup=main_menu_kb(message.from_user.id))
    await state.clear()

@dp.callback_query(F.data == 'edit_menu')
async def edit_menu(callback: CallbackQuery):
    if str(callback.from_user.id) != ADMIN_CHAT_ID:
        await callback.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω", show_alert=True)
        return
    await callback.answer()
    await callback.message.edit_text(
        "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ–Ω—é:\n–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <–Ω–∞–∑–≤–∞–Ω–∏–µ>;<—Ü–µ–Ω–∞>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='menu')]
        ])
    )

@dp.message(F.text.regexp(r'^.+;\d+$'))
async def add_menu_item(message: Message):
    if str(message.from_user.id) != ADMIN_CHAT_ID:
        return
    try:
        name, price = message.text.split(';')
        menu_data[name.strip()] = {'price': int(price)}
        save_menu(menu_data)
        await message.answer(f"–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä: {name.strip()} –∑–∞ {price}‚ÇΩ", reply_markup=main_menu_kb(message.from_user.id))
    except Exception as e:
        await message.answer("–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç —Ç–∞–∫–æ–π: –Ω–∞–∑–≤–∞–Ω–∏–µ;—Ü–µ–Ω–∞")

# ENTRY POINT
async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())

